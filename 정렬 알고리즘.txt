JS 정렬 알고리즘

# [1] 선택 정렬 알고리즘

선택 정렬(Selection Sort)

-> 선택 정렬은 매 단계에서 가장 작은 원소를 선택해서 앞으로 보내는 정렬이다.
-> 앞으로 보내진 원소는 더 이상 위치가 변경되지 않는다.
-> 시간 복잡도 O(N^2)로 비효율적인 정렬 알고리즘 중 하나다. 

1. 각 단계에서 가장 작은 원소를 선택한다.
2. 현재까지 처리되지 않은 원소들 중, 가장 앞의 원소와 위치를 교체한다.

# 정렬할 배열 2-4-3-1-9-6-8-7-5

1) 1-4-3-2-9-6-8-7-5
2) 1-2-3-4-9-6-8-7-5
3) 1-2-3-4-9-6-8-7-5
4) 1-2-3-4-9-6-8-7-5
5) 1-2-3-4-9-6-8-7-5
6) 1-2-3-4-5-6-8-7-9
7) 1-2-3-4-5-6-7-8-9
8) 1-2-3-4-5-6-7-8-9 [정렬 완료] 

가장 작은 수를 앞으로 당겨오면서, 그 자리의 원소와 자리를 바꿔가며 정렬한다


// 선택 정렬 함수 코드 예시

function selectionSort(arr){
  for(let i=0; i<arr.length; i++){
    let minIndex = i; // 가장 작은 원소의 인덱스

  for(let j=i+1; j< arr.length; j++){
      if(arr[minIndex] > arr[j]){
        minIndex = j;
  }
}

  // 스와프(swap)
  let temp = arr[i];
  arr[i] = arr[minIndex];
  arr[minIndex] = temp;
  }
}

// 선택 정렬(Selection Sort) 소스 코드 예시

/* 1) 선택 정렬의 수행 시간 측정 */
// 0부터 999까지의 정수 30000개를 담은 배열 생성

let arr = Array.from({length:30000},() => Math.floor(Math.random() * 1000));

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산
let startTime = new Data().getTime();
selectionSort(arr);
let endTime = new Date().getTime(); 

//시간차 출력
console.log('선택 정렬 소요 시간:', endTime - startTime, "ms.");

/* 2) 이미 정렬된 배열에 대한 선택 정렬의 수행 시간 측정 */
// 0부터 999까지의 정수 30000개를 담은 배열 생성

arr = Array.from({ length: 30000 }, () => 7);

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산

startTime = new Date().getTime();
selectionSort(arr);
endTime = new Date().getTime();

// 시간차 출력
console.log('정렬된 배열에 대한 선택 정렬 소요 시간:', endTime - startTime, "ms.");

선택 정렬 소요 시간 : 1743 ms.
정렬된 배열에 대한 선택 정렬 소요 시간 : 1895 ms.

===============================================================================================

선택 정렬(Selection Sort)의 시간 복잡도

- 선택 정렬이란 가장 작은 것을 선택해서 앞으로 보내는 정렬 기법이다. 
- 매 단계에서 가장 작은 것을 선택하는 데에 약 N번의 연산이 필요하다 (선형 탐색)
- 결과적으로 약 N개의 단계를 거친다는 점에서 최악의 경우 O(N^2)의 시간 복잡도를 가진다.

================================================================================================


버블 정렬 (많은 시간이 









