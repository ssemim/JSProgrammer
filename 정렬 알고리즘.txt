JS 정렬 알고리즘

# [1] 선택 정렬 알고리즘

선택 정렬(Selection Sort)

-> 선택 정렬은 매 단계에서 가장 작은 원소를 선택해서 앞으로 보내는 정렬이다.
-> 앞으로 보내진 원소는 더 이상 위치가 변경되지 않는다.
-> 시간 복잡도 O(N^2)로 비효율적인 정렬 알고리즘 중 하나다. 

1. 각 단계에서 가장 작은 원소를 선택한다.
2. 현재까지 처리되지 않은 원소들 중, 가장 앞의 원소와 위치를 교체한다.

# 정렬할 배열 2-4-3-1-9-6-8-7-5

1) 1-4-3-2-9-6-8-7-5
2) 1-2-3-4-9-6-8-7-5
3) 1-2-3-4-9-6-8-7-5
4) 1-2-3-4-9-6-8-7-5
5) 1-2-3-4-9-6-8-7-5
6) 1-2-3-4-5-6-8-7-9
7) 1-2-3-4-5-6-7-8-9
8) 1-2-3-4-5-6-7-8-9 [정렬 완료] 

가장 작은 수를 앞으로 당겨오면서, 그 자리의 원소와 자리를 바꿔가며 정렬한다


// 선택 정렬 함수 코드 예시

function selectionSort(arr){
  for(let i=0; i<arr.length; i++){
    let minIndex = i; // 가장 작은 원소의 인덱스

  for(let j=i+1; j< arr.length; j++){
      if(arr[minIndex] > arr[j]){
        minIndex = j;
  }
}

  // 스와프(swap)
  let temp = arr[i];
  arr[i] = arr[minIndex];
  arr[minIndex] = temp;
  }
}

// 선택 정렬(Selection Sort) 소스 코드 예시

/* 1) 선택 정렬의 수행 시간 측정 */
// 0부터 999까지의 정수 30000개를 담은 배열 생성

let arr = Array.from({length:30000},() => Math.floor(Math.random() * 1000));

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산
let startTime = new Data().getTime();
selectionSort(arr);
let endTime = new Date().getTime(); 

//시간차 출력
console.log('선택 정렬 소요 시간:', endTime - startTime, "ms.");

/* 2) 이미 정렬된 배열에 대한 선택 정렬의 수행 시간 측정 */
// 0부터 999까지의 정수 30000개를 담은 배열 생성

arr = Array.from({ length: 30000 }, () => 7);

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산

startTime = new Date().getTime();
selectionSort(arr);
endTime = new Date().getTime();

// 시간차 출력
console.log('정렬된 배열에 대한 선택 정렬 소요 시간:', endTime - startTime, "ms.");

선택 정렬 소요 시간 : 1743 ms.
정렬된 배열에 대한 선택 정렬 소요 시간 : 1895 ms.

===============================================================================================

선택 정렬(Selection Sort)의 시간 복잡도

- 선택 정렬이란 가장 작은 것을 선택해서 앞으로 보내는 정렬 기법이다. 
- 매 단계에서 가장 작은 것을 선택하는 데에 약 N번의 연산이 필요하다 (선형 탐색)
- 결과적으로 약 N개의 단계를 거친다는 점에서 최악의 경우 O(N^2)의 시간 복잡도를 가진다.

================================================================================================


버블 정렬 (선택정렬과 마찬가지로 간단한 로직이나, 동작 시간이 굉장히 큼. 시간 복잡도가 비효율적)


# [2] 버블 정렬(Bubble Sort)

- 단순히 인접한 두 원소를 확인하여, 정렬이 안 되어 있다면 위치를 서로 변경한다.
- 서로 인접한 두 원소를 비교하는 형태가 거품과 같다고 하여 붙여진 이름
- 시간 복잡도 O(N^2)로 비효율적인 정렬 알고리즘 중 하나

버블 정렬(Bubble Sort) 동작 방식

-> 각 단계에서는 인접한 두 개의 원소를 비교하여, 필요시 위치를 변경한다.
-> 첫째와 둘째를 비교, 둘째와 셋째를 비교, 셋째와 넷째를 비교하는 방식 

=> 각 단계를 거칠 때 마다 가장 큰 값을 하나씩 확실하게 결정하는 것으로 이해할 수 있다.



버블 정렬 예시

- 정렬할 배열 9-8-2-4-3

1단계 -> 89243-  82943 - 82493 - 82439 [4회 비교 후 9가 맨 오른쪽으로 정렬]
2단계 -> (82439에서 시작) 28439 - 24839 - 24389 [3회 비교 후 8이 9앞으로 정렬] 
3단계 -> (24389에서 시작) 24389 - 23489 [2회 비교 후 4가 89 앞으로 정렬]
4단계 -> 23489 - 23489 [1회 비교후 정렬]

5단계 [23489] 정렬 완료 

-----------------------------------------------------------------------------------

버블 정렬 (Bubble Sort) 소스 코드 예시

// 버블 정렬 함수

function bubbleSort(arr){
   for(let i = arr.length -1; i>0; i--){
    for(let j = 0; j<i; j++){
      if(arr[j]<arr[j+1]){
          let temp = arr[j]; // 인접한 두 개씩 반복적으로 확인하며 위치를 바꿔줌
          arr[j] = arr[j+1];
arr[j+1] = temp;
      }
    }       
   }
}

-------------------------------------------------------------------------------------

/* 버블 정렬의 수행 시간 측정 */
// 0부터 999까지의 정수 30000개를 담은 배열 생성

let arr = Array.from({length: 30000},() => Math.floor(Math.random() * 1000 ));

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산 

startTime = new Date().getTime();
bubbleSort(arr);
endTime = new Date().getTime();

// 시간차 출력 

console.log("버블 정렬 소요 시간 :", endTime = startTime, "ms.");

/* 2) 이미 정렬된 배열에 대한 버블 정렬의 수행 시간 측정*/
// 값이 7인 정수 30000개를 담은 배열 생성

arr= Array.from({length:30000},() => 7);

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산 

startTime = new Date().getTime();
bubbleSort(arr);
endTime = new Date().getTime();

// 시간차 출력 
console.log("정렬된 배열에 대한 버블 정렬 소요 시간:", endTime = startTime, "ms.");


실행 결과시 -> 버블 정렬 소요 시간 2912 ms / 정렬된 배열에 대한 버블 정렬 소요 시간 2402ms 이므로 
O(N^2) 정렬중에서도 아주 비효율적임... (데이터 클때 절대쓰면안됌)


**  버블 정렬 시간 복잡도

최악의 경우 시간 복잡도 O(N^2)보장 (이중반복문 꼴..)
-이미 정렬된 배열에 대해서도 모든 비교가 필요하므로 굉장히 비효율적인 정렬 알고리즘 중 하나임 



---------------------------------------------------------------------------------------------------------------


[3] 삽입 정렬 => 일반적인 경우에는 선택 정렬과 버블 정렬보다 빠르게 동작함

삽입 정렬(Insertion Sort)
-> 삽입 정렬이란 각 숫자를 적절한 위치에 삽입하는 정렬 기법이다.

1. 각 다계에서 현재 원소가 삽입될 위치를 찾는다.
2. 적절한 위치에 도달할 때 까지 반복적으로 왼쪽으로 이동한다.

=> 삽입 정렬을 수행할 때에는 처음에 첫 번째 원소는 정렬이 되어있다고 고려한다 

마찬가지로 언제나 왼쪽은 정렬이 완성된 형태로 취급함 
(기존에 해왔던 정렬을 망가뜨리지 않고 정렬이 필요한 원소만 올바른 위치에 삽입하므로)
버블 정렬보다 계산 횟수가 적음 / 불필요한 계산을 줄일 수 있음 

// 삽입 정렬 함수 

function insertionSort(arr){
for(let i =1; i< arr.length; i++){
  for(let j = i; j>0; j--){
    // 인덱스 j부터 1까지 1씩 감소하며 반복
if(arr[j] < arr[j-1]){
  // 한 칸씩 왼쪽으로 이동
  // 스와프(swap)

  let temp = arr[j];
  arr[j] = arr[j-1];
arr[j-1] = temp;
} else{
  // 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
break;
      }
    }
  }
}


삽입 정렬이란 각 원소를 적절한 위치에 삽입하는 정렬 기법이다.
매 단계에서 현재 처리중인 원소가 삽입될 위치를 찾기 위해 약 N번의 연산이 필요하다
결과적으로 약 N개의 단계를 거친다는 점에서 최악의 경우 O(N^2)의 시간 복잡도를 가진다.



---------------------------------------------------------------------------------------------


[4] 병합 정렬

-> 앞선 알고리즘들 보단 훨씬 효율적으로 동작함
-> 현존하는 알고리즘 중 빠른 축에 속하며, 실생활에서도 자주 이용되는 편
-> 시간 복잡도 O (logN) 보장


=> 병합 정렬은 전형적인 분할 정복(divide and conquer) 알고리즘이다

1. 분할(divide) : 큰 문제를 작은 부분 문제 (쉬운 문제)로 분할한다.
2. 정복(conquer) : 작은 부분 문제를 각각 해결한다.
3. 조합(combine) : 해결한 부분 문제의 답을 이용하여 다시 큰 문제를 해결한다.


=> 분할 정복은 일반적으로 재귀 함수를 이용하여 구현한다.
   -> 이유) 큰 문제를 작은 문제로 "분할하는 방식이 동일한" 경우가 많기 때문이다.
=> 더 이상 쪼갤 수 없는 크기가 될 때 까지 계속하여 분할한다.


분할 정복의 일반적인 수행 과정 

문제 -> (분할) 부분문제 - > (안쪼개질때까지 분할 후 정복) 문제해결 -> (조합) 문제해결 (다 해결해서 조각조각 붙임)


분할 정복의 단점 : 일반적으로 재귀 함수를 사용한다는 점에서 스택 오버 플로우가 발생할 수 있으며
재귀 함수 호출 자체가 메모리에 무리를 줌(변수 무한 저장 오류) -> 오버헤드(overhead)로 이어짐


병합 정렬의 특징 

-> 시간 복잡도 O(NlogN)을 보장하는 빠른 정렬 알고리즘 중 하나이다.

=> 병합 정렬의 동작 방식

병합 정렬은 분할 정복을 이용하는 가장 기본적인 정렬 알고리즘이다.

1. 분할(divide) : 정렬할 배열(큰 문제)을 같은 크기의 부분 배열(작은 문제) 2개로 분할한다. => 단순히 배열의 크기를 절반으로 쪼갠다
2. 정복(conquer) : 부분 배열을 정렬한다(작은 문제를 해결한다.)
3. 조합(combine) : 정렬된 부분 배열을 하나의 배열로 다시 병합한다. => 두 개의 배열을 하나의 배열로 조합한다.


정복 (Conquer) 과정 
- 각 부분 배열은 이미 정렬된 상태로 본다.
- 각 부분 배열에 대하여 첫째 원소부터 시작하여 하나씩 확인한다.
- 총 원소의 개수가 N개일 때, O(N)의 시간 복잡도가 요구된다.

쪼개놓은 배열 중에서 가장 작은것을 비교해서 순차적으로 넣음

병합 정렬의 시간 복잡도 (Time Complexity)

-> 직관적으로 생각했을 때, 높이가 O(logN)이고 너비가 O(N)인 정사각형과 유사하다.
-> 따라서 최악의 경우 시간 복잡도는 O(NlogN)이다.
-> 장점 : 최악의 경우에도 O(NlogN)을 보장할 수 있다는 점에서 효율적이다.
-> 단점 : 일반적인 경우, 정복(conquer)과정에서 임시 배열이 필요하다.


// 병합 정렬 소스 코드


==> 병합(merge) 수행 함수

function merge(arr,left,mid,right){

let i = left;
let j = mid+1;
let k = left; // 결과 배열의 인덱스

while( i <= mid && j <= right){
if(arr[i] <= arr[j]) sorted[k++] = arr[i++];
else sorted[k++] = arr[j++];
}
// 왼쪽 배열에 대한 처리가 다 끝난 경우
if(i > mid){
for (; j<= right; j++) sorted[k++] = arr[j];
}
// 오른쪽 배열에 대한 처리가 다 끝난 경우
else {
for (; i <= mid; i++) { sorted[k++] = arr[i];
}
// 정렬된 배열 결과를 원본 배열에 반영하기

for(let x= left; x <= right; x++){

arr[x] = sorted[x];

}
}
}

==> 병합 정렬(merge sort) 함수
function mergeSort(arr,left,right){
// 원소가 1개인 경우, 해당 배열은 정렬이 된 상태로 이해 가능
if(left<right){
// 원소가 2개 이상이라면

let mid = parseInt((left + right)/2); // 2개의 부분 배열로 분할(divide)
mergeSort(arr,left,mid); // 왼쪽 부분 배열 정렬 수행 (conquer)
mergeSort(arr,mid+1,right); // 오른쪽 부분 배열 정렬 수행 (conquer)
merge(arr,left,mid,right); // 정렬된 2개의 배열을 하나로 병합(combine)
  }
}



/* 1) 병합 정렬의 수행 시간 측정 */
// 0부터 999까지 정수 100000개를 담은 배열 생성

let arr = Array.from({lengthL 100000}, ()=> Math.floor(Math.random()*1000));

// getTime() : 1970-01-01부터의 시간차를 ms 단위로 계산
startTime = new Date().getTime();

// 임시 정렬 배열(sorted)의 정의

sorted = Array.from({length: arr.length}, () => 0);
mergeSort(arr,0,arr.length -1);
endTime = new Date().getTime();

// 시간차 출력
console.log("병합 정렬 소요 시간 :", endTime - startTime, "ms");

/* 2) 이미 정렬된 배열에 대한 병합 정렬의 수행 시간 측정 */
// 값이 7인 정수 100000개를 담은 배열 생성

arr = Array.from({length: 100000}, ()=> 7); 

// getTime() : 1970-01-01 부터의 시간차를 ms 단위로 계산
startTime = new Date().getTime();
// 임시 정렬 배열 (sorted) 정의

sorted = Array.from({length: arr.length},() => 0);
mergeSort(arr,0,arr.length -1);
endTime = new Date().getTime();

// 시간차 출력

console.log("정렬된 배열에 대한 병합 정렬 소요 시간", endTime - startTime, "ms.");

-> 병합 정렬 소요 시간 183ms
-> 정렬된 배열에 대한 병합 정렬 소요 시간 : 167ms

==============================================================================================================



