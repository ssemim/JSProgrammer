=> 코테에서 자주 등장하는 탐욕법 알고리즘 이해하기


탐욕 알고리즘 (Greedy Algorithm)

- 현재 상황에서 당장 가장 좋아보이는 상황만을 선택하는 알고리즘
- 흔히 그리디 알고리즘, 혹은 탐욕법이라고 불림
- 최적의 해를 구하기 위한 근사적인 방법으로 사용될 때가 많다.


ex) 트리 구조 자료형에서 루트에서 출발하여 단말 노드까지 가는 경우
 -> 거쳐가는 노드의 합이 가장 큰 경우는? 
   - 매 상황에서 단순히 가장 큰 노드를 선택(탐욕 알고리즘)하는 경우 : 8
   - 완전 탐색은 하지 못하지만, 최적의 해에 가까운 값을 구할 수 있으며, 시간 복잡도가 개선 된다. 

=> 현실 세계의 많은 상황에서는, 단순한 탐욕 알고리즘으로는 최적의 해를 놓칠 수 있다.
=> 하지만, 최적의 해에 가까운 답을 뱉는 것을 고려하면, 현실에서의 다양한 프로그램에서 "근사해"를 구하는 목적으로 사용되곤 한다.


---------------------------------------------------------------------------------------------------------------

코테에서, 참가자의 코드 결과가 정해진 결과와 같은지 확인한다.
-> 코딩 테스트에서 탐욕 알고리즘 문제가 출제되는 경우를 생각해보자 
 => 일반적으로 탐욕 알고리즘 유형에서는, 탐욕 방법으로 최적의 해가 보장되는 문제가 출제된다.

----------------------------------------------------------------------------------------------------------------

탐욕 알고리즘의 접근 방법

- 탐욕 알고리즘 문제를 해결할 때는 일반적으로 다음의 과정을 거친다

1) 방법 고안하기 : 현재 상황에서 어떤 것을 선택할 지, 알고리즘을 고안한다.
2) 정당성 확인하기 : 자신이 고안한 알고리즘이 항상 최적의 해를 보장하는지 확인한다 (증명 단계)

-----------------------------------------------------------------------------------------------------------------

거스름 돈 문제

=> 거스름 돈 문제는 전형적인 탐욕 알고리즘의 예시이다.
-> 카운터에 500,100,50,10원 짜리 동전이 무수히 많이 존재한다.
==> ex)손님에게 6480원을 거슬러 주어야 할 때, 동전 개수의 최솟값은? 

정답) 가장 큰 화폐단위부터 거슬러 준다 (12+4+1+3) => 정답은 20개이다 
각 화폐 단위가 배수 관계에 속하기 때문에 최적의 해가 성립 


그리디 알고리즘을 사용할 때에는 => 내가 선택한 방법이 어떻게 정당성을 부여할 것인가가 가장 중요함



